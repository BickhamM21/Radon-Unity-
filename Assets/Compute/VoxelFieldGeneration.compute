// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain
#pragma kernel GenerateNormals


// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
RWStructuredBuffer<float> Result;

float GridSize;

float3 hash(float3 p) {

	p = float3(dot(p, float3(127.1, 311.7, 74.7)),
			   dot(p, float3(269.5, 183.3, 246.1)),
			   dot(p, float3(113.5, 271.9, 124.6)));

	return - 1.0 + 2.0 * frac(sin(p) * 43758.5453123);

}


float4 noised(float3 x) {

	float3 p = floor((x * GridSize)/16);
	float3 w = frac((x * GridSize)/16);


	float3 u = w * w * w * (w * (w * 6.0 - 15.0) + 10.0);
	float3 du = 30.0 * w * w * (w * (w - 2.0) + 1.0);



	// gradients
	float3 ga = hash(p + float3(0.0, 0.0, 0.0));
	float3 gb = hash(p + float3(1.0, 0.0, 0.0));
	float3 gc = hash(p + float3(0.0, 1.0, 0.0));
	float3 gd = hash(p + float3(1.0, 1.0, 0.0));
	float3 ge = hash(p + float3(0.0, 0.0, 1.0));
	float3 gf = hash(p + float3(1.0, 0.0, 1.0));
	float3 gg = hash(p + float3(0.0, 1.0, 1.0));
	float3 gh = hash(p + float3(1.0, 1.0, 1.0));

	// projections
	float va = dot(ga, w - float3(0.0, 0.0, 0.0));
	float vb = dot(gb, w - float3(1.0, 0.0, 0.0));
	float vc = dot(gc, w - float3(0.0, 1.0, 0.0));
	float vd = dot(gd, w - float3(1.0, 1.0, 0.0));
	float ve = dot(ge, w - float3(0.0, 0.0, 1.0));
	float vf = dot(gf, w - float3(1.0, 0.0, 1.0));
	float vg = dot(gg, w - float3(0.0, 1.0, 1.0));
	float vh = dot(gh, w - float3(1.0, 1.0, 1.0));

	return float4(va + u.x * (vb - va) + u.y * (vc - va) + u.z * (ve - va) + u.x * u.y * (va - vb - vc + vd) + u.y * u.z * (va - vc - ve + vg) + u.z * u.x * (va - vb - ve + vf) + (-va + vb + vc - vd + ve - vf - vg + vh) * u.x * u.y * u.z,    // value
		ga + u.x * (gb - ga) + u.y * (gc - ga) + u.z * (ge - ga) + u.x * u.y * (ga - gb - gc + gd) + u.y * u.z * (ga - gc - ge + gg) + u.z * u.x * (ga - gb - ge + gf) + (-ga + gb + gc - gd + ge - gf - gg + gh) * u.x * u.y * u.z +   // derivatives
		du * (float3(vb, vc, ve) - va + u.yzx * float3(va - vb - vc + vd, va - vc - ve + vg, va - vb - ve + vf) + u.zxy * float3(va - vb - ve + vf, va - vb - vc + vd, va - vc - ve + vg) + u.yzx * u.zxy * (-va + vb + vc - vd + ve - vf - vg + vh)));
}


float4 fbm_Noise(float3 pos, int octaves) {

	float total = 0;
	float frequency = 1;
	float amplitude = 1;

	float3 totalDerivative = float3(0,0,0);

	for (int i = 0; i < octaves; i++) {
		total += noised((pos * frequency)).x * amplitude;
		totalDerivative += noised((pos * frequency)).yzw * amplitude;

		amplitude *= .5;
		frequency *= 2;
	}


	

	return float4(total, totalDerivative.x, totalDerivative.y, totalDerivative.z);
}

int SizeX;
int SizeY;

float x;
float y;
float z;

float Circle(float3 pos) {
	return pos.x* pos.x + pos.y * pos.y + pos.z * pos.z - 36;
}

[numthreads(1,1,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
	float3 pos = id + float3(.01, .01, 01);
	Result[id.x + (id.y * SizeX) + (id.z * SizeX * SizeY)] = fbm_Noise(pos, 3).x;
}

RWStructuredBuffer<float3> Mesh;
RWStructuredBuffer<float3> Normals;

[numthreads(1,1,1)]
void GenerateNormals(uint3 id : SV_DispatchThreadID) 
{
	float3 pos = Mesh[id.x];
	Normals[id.x] = -normalize(float3(fbm_Noise(pos,1).y, fbm_Noise(pos,1).z, fbm_Noise(pos,1).w));
	
}